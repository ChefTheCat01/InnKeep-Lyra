import os
import discord
from dotenv import load_dotenv
import requests
import json
from bs4 import BeautifulSoup
from discord.ext import commands

load_dotenv()
TOKEN = os.getenv('DISCORD_TOKEN')
GUILD = os.getenv('DISCORD_GUILD')

intents = discord.Intents().all()
bot = commands.Bot(command_prefix='%', intents=intents)

@bot.event
async def on_ready():
    guild = discord.utils.find(lambda g: g.name == GUILD, bot.guilds)
    print(
        f'{bot.user} is connected to the following guild:\n'
        f'{guild.name}(id: {guild.id})'
    )

# help command
@bot.command(name='help')
async def help_command(ctx):
    response = 'I am InnKeep Lyra, a bot designed to help with D&D related queries. Here are my commands:\n\n'
    response += '**%help** : Get the list of commands\n'
    response += '**%hi** : Greet the bot\n'
    response += '**%wr [name]** : Get information about a race\n'
    response += '**%wc [name]** : Get information about a class\n'
    response += '**%wm [name]** : Get information about a creature or monster\n'
    await ctx.send(response)

# hi command
@bot.command(name='hi')
async def hi_command(ctx):
    response = 'Ahh, adventurer...welcome to our inn. What brings you here?\n'
    await ctx.send(response)

# race command
@bot.command(name='wr')
async def race(ctx, *, name):
    name = name.replace(" ", "-")
    response = ""
    r = requests.get(f'https://www.dndbeyond.com/races/{name}')
    soup = BeautifulSoup(r.content, 'html.parser')
    try:
        response += soup.find('h1', attrs={'class': 'page-title'}).text + "\n"
    except:
        response += "I'm sorry, I couldn't find that race. Please check your spelling and try again.\n"
        await ctx.send(response)
        return
    sections = soup.find_all('div', attrs={'class': 'ct__main'})
    for section in sections:
        heading = section.find('h2')
        if heading is not None:
            response += f"\n**{heading.text}**\n"
        content = section.find('div', attrs={'class': 'ct__description'})
        if content is not None:
            response += f"{content.text}\n"
    await ctx.send(response)

# class command
@bot.command(name='wc')
async def classs(ctx, *, name):
    name = name.replace(" ", "-")
    response = ""
    r = requests.get(f'https://www.dndbeyond.com/classes/{name}')
    soup = BeautifulSoup(r.content, 'html.parser')
    try:
        response += soup.find('h1', attrs={'class': 'page-title'}).text + "\n"
    except:
        response += "I'm sorry, I couldn't find that class. Please check your spelling and try again.\n"
        await ctx.send(response)
        return
    sections = soup.find_all('div', attrs={'class': 'ct__main'})
    for section in sections:
        heading = section.find('h2')
        if heading is not None:
            response += f"\n**{heading.text}**\n"
        content = section.find('div', attrs={'class': 'ct__description'})
        if content is not None:
            response += f"{content.text}\n"
    await ctx.send(response)

    # armor command
    @bot.command()
    async def armor(ctx, *, name):
        query = name.strip().lower().replace(" ", "-")
        url = f"https://www.dndbeyond.com/equipment/{query}"
        try:
            html = urlopen(url).read()
        except HTTPError as e:
            return await ctx.send(f"Unable to find information for {name}")

        soup = BeautifulSoup(html, "html.parser")

        # get the name of the armor
        try:
            armor_name = soup.find("div", {"class": "ct-page-title"}).text.strip()
        except AttributeError as e:
            return await ctx.send(f"Unable to find information for {name}")

        # get the armor's properties
        armor_props = soup.find_all("div", {"class": "ct-item-property__value"})

        properties = []
        for prop in armor_props:
            properties.append(prop.text.strip())

        # prepare and send the message with the armor's info
        embed = discord.Embed(title=armor_name, url=url, color=0xFF5733)
        embed.add_field(name="Properties", value="\n".join(properties))
        await ctx.send(embed=embed)

    # shield command
    @bot.command()
    async def shield(ctx, *, name):
        query = name.strip().lower().replace(" ", "-")
        url = f"https://www.dndbeyond.com/equipment/{query}"
        try:
            html = urlopen(url).read()
        except HTTPError as e:
            return await ctx.send(f"Unable to find information for {name}")

        soup = BeautifulSoup(html, "html.parser")

        # get the name of the shield
        try:
            shield_name = soup.find("div", {"class": "ct-page-title"}).text.strip()
        except AttributeError as e:
            return await ctx.send(f"Unable to find information for {name}")

        # get the shield's properties
        shield_props = soup.find_all("div", {"class": "ct-item-property__value"})

        properties = []
        for prop in shield_props:
            properties.append(prop.text.strip())

        # prepare and send the message with the shield's info
        embed = discord.Embed(title=shield_name, url=url, color=0xFF5733)
        embed.add_field(name="Properties", value="\n".join(properties))
        await ctx.send(embed=embed)

    # miscellaneous command
    @bot.command()
    async def misc(ctx, *, name):
        query = name.strip().lower().replace(" ", "-")
        url = f"https://www.dndbeyond.com/equipment/{query}"
        try:
            html = urlopen(url).read()
        except HTTPError as e:
            return await ctx.send(f"Unable to find information for {name}")

        soup = BeautifulSoup(html, "html.parser")

        # get the name of the item
        try:
            item_name = soup.find("div", {"class": "ct-page-title"}).text.strip()
        except AttributeError as e:
            return await ctx.send(f"Unable to find information for {name}")

        # get the item's properties
        item_props = soup.find_all("div", {"class": "ct-item-property__value"})

        properties = []
        for prop in item_props:
            properties.append(prop.text.strip())

        # prepare and send the message with the item's info
        embed = discord.Embed(title=item_name, url=url, color=0xFF5733)
        embed.add_field(name="Properties", value="\n".join(properties))
        await ctx.send(embed=embed)

